# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/spoom/all/spoom.rbi
#
# spoom-1.2.4

module Spoom
  extend T::Sig
end
class Spoom::FileCollector
  def clean_path(*args, **, &blk); end
  def excluded_file?(*args, **, &blk); end
  def excluded_path?(*args, **, &blk); end
  def files(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def mime_type_for(*args, **, &blk); end
  def visit_directory(*args, **, &blk); end
  def visit_file(*args, **, &blk); end
  def visit_path(*args, **, &blk); end
  def visit_paths(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Context
  def absolute_path(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.mktmp!(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Spoom::Context::Bundle
  include Spoom::Context::Exec
  include Spoom::Context::FileSystem
  include Spoom::Context::Git
  include Spoom::Context::Sorbet
end
module Spoom::Context::Bundle
  def bundle(*args, **, &blk); end
  def bundle_exec(*args, **, &blk); end
  def bundle_install!(*args, **, &blk); end
  def gem_version_from_gemfile_lock(*args, **, &blk); end
  def gemfile_lock_specs(*args, **, &blk); end
  def read_gemfile(*args, **, &blk); end
  def read_gemfile_lock(*args, **, &blk); end
  def write_gemfile!(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::ExecResult < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def err; end
  def exit_code; end
  def out; end
  def self.inherited(s); end
  def status; end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
module Spoom::Context::Exec
  def exec(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Context::FileSystem
  def absolute_path_to(*args, **, &blk); end
  def collect_files(*args, **, &blk); end
  def destroy!(*args, **, &blk); end
  def exist?(*args, **, &blk); end
  def file?(*args, **, &blk); end
  def glob(*args, **, &blk); end
  def list(*args, **, &blk); end
  def mkdir!(*args, **, &blk); end
  def move!(*args, **, &blk); end
  def read(*args, **, &blk); end
  def remove!(*args, **, &blk); end
  def write!(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Git
end
class Spoom::Git::Commit < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def self.inherited(s); end
  def self.parse_line(*args, **, &blk); end
  def sha; end
  def time; end
  def timestamp(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
module Spoom::Context::Git
  def git(*args, **, &blk); end
  def git_checkout!(*args, **, &blk); end
  def git_checkout_new_branch!(*args, **, &blk); end
  def git_commit!(*args, **, &blk); end
  def git_current_branch(*args, **, &blk); end
  def git_diff(*args, **, &blk); end
  def git_init!(*args, **, &blk); end
  def git_last_commit(*args, **, &blk); end
  def git_log(*args, **, &blk); end
  def git_push!(*args, **, &blk); end
  def git_show(*args, **, &blk); end
  def git_workdir_clean?(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Context::Sorbet
  def has_sorbet_config?(*args, **, &blk); end
  def read_file_strictness(*args, **, &blk); end
  def read_sorbet_config(*args, **, &blk); end
  def sorbet_config(*args, **, &blk); end
  def sorbet_intro_commit(*args, **, &blk); end
  def sorbet_removal_commit(*args, **, &blk); end
  def srb(*args, **, &blk); end
  def srb_files(*args, **, &blk); end
  def srb_files_with_strictness(*args, **, &blk); end
  def srb_metrics(*args, **, &blk); end
  def srb_tc(*args, **, &blk); end
  def srb_version(*args, **, &blk); end
  def write_sorbet_config!(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Color < T::Enum
  def ansi_code(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Colorize
  def set_color(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Deadcode
  def self.index_erb(*args, **, &blk); end
  def self.index_ruby(*args, **, &blk); end
  def self.load_custom_plugins(*args, **, &blk); end
  def self.plugins_from_gemfile_lock(*args, **, &blk); end
end
class Spoom::Deadcode::ERB < Erubi::Engine
  def add_code(*args, **, &blk); end
  def add_expression(*args, **, &blk); end
  def add_postamble(*args, **, &blk); end
  def add_text(*args, **, &blk); end
  def flush_newline_if_pending(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Index
  def all_definitions(*args, **, &blk); end
  def all_references(*args, **, &blk); end
  def define(*args, **, &blk); end
  def definitions(*args, **, &blk); end
  def definitions_for_name(*args, **, &blk); end
  def finalize!(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def reference(*args, **, &blk); end
  def references(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Indexer < SyntaxTree::Visitor
  def call_args(*args, **, &blk); end
  def current_node(*args, **, &blk); end
  def define_attr_reader(*args, **, &blk); end
  def define_attr_writer(*args, **, &blk); end
  def define_class(*args, **, &blk); end
  def define_constant(*args, **, &blk); end
  def define_method(*args, **, &blk); end
  def define_module(*args, **, &blk); end
  def file_name; end
  def index(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def last_sig(*args, **, &blk); end
  def nesting_block(*args, **, &blk); end
  def nesting_block_call(*args, **, &blk); end
  def nesting_block_call_name(*args, **, &blk); end
  def nesting_class(*args, **, &blk); end
  def nesting_class_name(*args, **, &blk); end
  def nesting_class_superclass_name(*args, **, &blk); end
  def nesting_node(*args, **, &blk); end
  def node_location(*args, **, &blk); end
  def node_string(*args, **, &blk); end
  def path(*args, **, &blk); end
  def reference_constant(*args, **, &blk); end
  def reference_method(*args, **, &blk); end
  def symbol_string(*args, **, &blk); end
  def visit(*args, **, &blk); end
  def visit_alias(*args, **, &blk); end
  def visit_aref(*args, **, &blk); end
  def visit_aref_field(*args, **, &blk); end
  def visit_arg_block(*args, **, &blk); end
  def visit_binary(*args, **, &blk); end
  def visit_call(*args, **, &blk); end
  def visit_class(*args, **, &blk); end
  def visit_command(*args, **, &blk); end
  def visit_command_call(*args, **, &blk); end
  def visit_const(*args, **, &blk); end
  def visit_const_path_field(*args, **, &blk); end
  def visit_def(*args, **, &blk); end
  def visit_field(*args, **, &blk); end
  def visit_module(*args, **, &blk); end
  def visit_opassign(*args, **, &blk); end
  def visit_send(*args, **, &blk); end
  def visit_symbol_literal(*args, **, &blk); end
  def visit_top_const_field(*args, **, &blk); end
  def visit_var_field(*args, **, &blk); end
  def visit_vcall(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Location
  def <=>(*args, **, &blk); end
  def end_column; end
  def end_line; end
  def file(*args, **, &blk); end
  def include?(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.from_string(*args, **, &blk); end
  def self.from_syntax_tree(*args, **, &blk); end
  def start_column; end
  def start_line(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Comparable
end
class Spoom::Deadcode::Location::LocationError < Spoom::Error
end
class Spoom::Deadcode::Definition < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def alive!(*args, **, &blk); end
  def alive?(*args, **, &blk); end
  def attr_reader?(*args, **, &blk); end
  def attr_writer?(*args, **, &blk); end
  def class?(*args, **, &blk); end
  def constant?(*args, **, &blk); end
  def dead?(*args, **, &blk); end
  def full_name; end
  def ignored!(*args, **, &blk); end
  def ignored?(*args, **, &blk); end
  def kind; end
  def location; end
  def method?(*args, **, &blk); end
  def module?(*args, **, &blk); end
  def name; end
  def self.inherited(s); end
  def status; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class Spoom::Deadcode::Definition::Kind < T::Enum
end
class Spoom::Deadcode::Definition::Status < T::Enum
end
class Spoom::Deadcode::Reference < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def constant?(*args, **, &blk); end
  def kind; end
  def location; end
  def method?(*args, **, &blk); end
  def name; end
  def self.inherited(s); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class Spoom::Deadcode::Reference::Kind < T::Enum
end
class Spoom::Deadcode::Send < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def args; end
  def block; end
  def each_arg(*args, **, &blk); end
  def each_arg_assoc(*args, **, &blk); end
  def name; end
  def node; end
  def recv; end
  def self.inherited(s); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
module Spoom::Deadcode::Plugins
end
class Spoom::Deadcode::Plugins::Base
  def camelize(*args, **, &blk); end
  def ignored_class_name?(*args, **, &blk); end
  def ignored_constant_name?(*args, **, &blk); end
  def ignored_method_name?(*args, **, &blk); end
  def ignored_module_name?(*args, **, &blk); end
  def ignored_name?(*args, **, &blk); end
  def ignored_subclass?(*args, **, &blk); end
  def internal_on_define_accessor(*args, **, &blk); end
  def internal_on_define_class(*args, **, &blk); end
  def internal_on_define_constant(*args, **, &blk); end
  def internal_on_define_method(*args, **, &blk); end
  def internal_on_define_module(*args, **, &blk); end
  def internal_on_send(*args, **, &blk); end
  def names(*args, **, &blk); end
  def on_define_accessor(*args, **, &blk); end
  def on_define_class(*args, **, &blk); end
  def on_define_constant(*args, **, &blk); end
  def on_define_method(*args, **, &blk); end
  def on_define_module(*args, **, &blk); end
  def on_send(*args, **, &blk); end
  def patterns(*args, **, &blk); end
  def self.ignore_classes_inheriting_from(*args, **, &blk); end
  def self.ignore_classes_named(*args, **, &blk); end
  def self.ignore_constants_named(*args, **, &blk); end
  def self.ignore_methods_named(*args, **, &blk); end
  def self.ignore_modules_named(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def self.save_names_and_patterns(arg0, arg1, arg2, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::ActionPack < Spoom::Deadcode::Plugins::Base
  def on_define_method(*args, **, &blk); end
  def on_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::ActiveJob < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::ActionMailer < Spoom::Deadcode::Plugins::Base
  def on_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::ActiveModel < Spoom::Deadcode::Plugins::Base
  def on_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::ActiveRecord < Spoom::Deadcode::Plugins::Base
  def on_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::ActiveSupport < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::GraphQL < Spoom::Deadcode::Plugins::Base
  def on_send(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Minitest < Spoom::Deadcode::Plugins::Base
  def on_define_method(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Namespaces < Spoom::Deadcode::Plugins::Base
  def on_define_class(*args, **, &blk); end
  def on_define_module(*args, **, &blk); end
  def used_as_namespace?(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Rails < Spoom::Deadcode::Plugins::Base
  def file_is_helper?(*args, **, &blk); end
  def on_define_class(*args, **, &blk); end
  def on_define_module(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Rake < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::RSpec < Spoom::Deadcode::Plugins::Base
end
class Spoom::Deadcode::Plugins::Rubocop < Spoom::Deadcode::Plugins::Base
  def on_define_constant(*args, **, &blk); end
  def on_define_method(*args, **, &blk); end
  def rubocop_constant?(*args, **, &blk); end
  def rubocop_method?(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Ruby < Spoom::Deadcode::Plugins::Base
  def on_send(*args, **, &blk); end
  def reference_symbol_as_constant(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Sorbet < Spoom::Deadcode::Plugins::Base
  def on_define_constant(*args, **, &blk); end
  def on_define_method(*args, **, &blk); end
  def sorbet_enum_constant?(*args, **, &blk); end
  def sorbet_type_member?(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Plugins::Thor < Spoom::Deadcode::Plugins::Base
  def on_define_method(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Remover
  def initialize(*args, **, &blk); end
  def remove_location(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Remover::Error < Spoom::Error
end
class Spoom::Deadcode::Remover::NodeRemover
  def apply_edit(*args, **, &blk); end
  def delete_attr_accessor(*args, **, &blk); end
  def delete_chars(*args, **, &blk); end
  def delete_constant_assignment(*args, **, &blk); end
  def delete_line_part(*args, **, &blk); end
  def delete_lines(*args, **, &blk); end
  def delete_node_and_comments_and_sigs(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def insert_accessor(*args, **, &blk); end
  def new_source(*args, **, &blk); end
  def replace_chars(*args, **, &blk); end
  def transform_sig(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Remover::NodeContext
  def attached_comments_and_sigs(*args, **, &blk); end
  def attached_sig(*args, **, &blk); end
  def comment_for_node?(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def nesting(*args, **, &blk); end
  def nesting=(arg0); end
  def next_node(*args, **, &blk); end
  def next_nodes(*args, **, &blk); end
  def node(*args, **, &blk); end
  def node_string(*args, **, &blk); end
  def parent_context(*args, **, &blk); end
  def parent_node(*args, **, &blk); end
  def previous_node(*args, **, &blk); end
  def previous_nodes(*args, **, &blk); end
  def sclass_context(*args, **, &blk); end
  def sorbet_extend_sig?(*args, **, &blk); end
  def sorbet_signature?(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Remover::NodeFinder < SyntaxTree::Visitor
  def initialize(*args, **, &blk); end
  def location_from_children(*args, **, &blk); end
  def location_from_node(*args, **, &blk); end
  def node(*args, **, &blk); end
  def nodes_nesting(*args, **, &blk); end
  def nodes_nesting=(arg0); end
  def self.find(*args, **, &blk); end
  def self.node_match_kind?(*args, **, &blk); end
  def visit(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::Error < Spoom::Error
  def initialize(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Deadcode::ParserError < Spoom::Deadcode::Error
end
class Spoom::Deadcode::IndexerError < Spoom::Deadcode::Error
end
module Spoom::Sorbet
end
class Spoom::Sorbet::Config
  def allowed_extensions; end
  def allowed_extensions=(arg0); end
  def copy(*args, **, &blk); end
  def ignore; end
  def ignore=(arg0); end
  def initialize(*args, **, &blk); end
  def no_stdlib(*args, **, &blk); end
  def no_stdlib=(arg0); end
  def options_string(*args, **, &blk); end
  def paths(*args, **, &blk); end
  def paths=(arg0); end
  def self.parse_file(*args, **, &blk); end
  def self.parse_option(*args, **, &blk); end
  def self.parse_string(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Sorbet::Errors
  def self.sort_errors_by_code(*args, **, &blk); end
end
class Spoom::Sorbet::Errors::Parser
  def append_error(*args, **, &blk); end
  def close_error(*args, **, &blk); end
  def error_line_match_regexp(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def match_error_line(*args, **, &blk); end
  def open_error(*args, **, &blk); end
  def parse(*args, **, &blk); end
  def self.parse_string(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Sorbet::Errors::Error
  def <=>(*args, **, &blk); end
  def code; end
  def file(*args, **, &blk); end
  def files_from_error_sections(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def line(*args, **, &blk); end
  def message; end
  def more(*args, **, &blk); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Comparable
end
module Spoom::LSP
end
class Spoom::LSP::Message
  def as_json(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def to_json(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::Request < Spoom::LSP::Message
  def id(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def params(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::Notification < Spoom::LSP::Message
  def initialize(*args, **, &blk); end
  def method(*args, **, &blk); end
  def params(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Printer
  def colorize(*args, **, &blk); end
  def dedent(*args, **, &blk); end
  def indent(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def out(*args, **, &blk); end
  def out=(arg0); end
  def print(*args, **, &blk); end
  def print_colored(*args, **, &blk); end
  def printl(*args, **, &blk); end
  def printn(*args, **, &blk); end
  def printt(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Spoom::Colorize
end
module Spoom::LSP::PrintableSymbol
  def accept_printer(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::Hover < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def contents; end
  def range; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Position < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def char; end
  def line; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Range < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def end; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def start; end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Location < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def range; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  def uri; end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::SignatureHelp < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def doc; end
  def label; end
  def params; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::Diagnostic < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def code; end
  def informations; end
  def message; end
  def range; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::DocumentSymbol < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def accept_printer(*args, **, &blk); end
  def children; end
  def detail; end
  def kind; end
  def kind_string(*args, **, &blk); end
  def location; end
  def name; end
  def range; end
  def self.from_json(*args, **, &blk); end
  def self.inherited(s); end
  def to_s(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
  include Spoom::LSP::PrintableSymbol
end
class Spoom::LSP::SymbolPrinter < Spoom::Printer
  def clean_uri(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def prefix(*args, **, &blk); end
  def prefix=(arg0); end
  def print_list(*args, **, &blk); end
  def print_object(*args, **, &blk); end
  def print_objects(*args, **, &blk); end
  def seen(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::Error < StandardError
end
class Spoom::LSP::Error::AlreadyOpen < Spoom::LSP::Error
end
class Spoom::LSP::Error::BadHeaders < Spoom::LSP::Error
end
class Spoom::LSP::Error::Diagnostics < Spoom::LSP::Error
  def diagnostics(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.from_json(*args, **, &blk); end
  def uri(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::ResponseError < Spoom::LSP::Error
  def code(*args, **, &blk); end
  def data(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.from_json(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::LSP::Client
  def close(*args, **, &blk); end
  def definitions(*args, **, &blk); end
  def document_symbols(*args, **, &blk); end
  def hover(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def next_id(*args, **, &blk); end
  def open(*args, **, &blk); end
  def read(*args, **, &blk); end
  def read_raw(*args, **, &blk); end
  def references(*args, **, &blk); end
  def send(*args, **, &blk); end
  def send_raw(*args, **, &blk); end
  def signatures(*args, **, &blk); end
  def symbols(*args, **, &blk); end
  def type_definitions(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Sorbet::Sigils
  def self.change_sigil_in_file(*args, **, &blk); end
  def self.change_sigil_in_files(*args, **, &blk); end
  def self.file_strictness(*args, **, &blk); end
  def self.sigil_string(*args, **, &blk); end
  def self.strictness_in_content(*args, **, &blk); end
  def self.update_sigil(*args, **, &blk); end
  def self.valid_strictness?(*args, **, &blk); end
  extend T::Sig
end
module Spoom::Sorbet::MetricsParser
  def self.parse_file(*args, **, &blk); end
  def self.parse_hash(*args, **, &blk); end
  def self.parse_string(*args, **, &blk); end
end
class Spoom::Sorbet::Error < StandardError
  def initialize(*args, **, &blk); end
  def result(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Sorbet::Error::Killed < Spoom::Sorbet::Error
end
class Spoom::Sorbet::Error::Segfault < Spoom::Sorbet::Error
end
module Spoom::Cli
end
module Spoom::Cli::Helper
  def blue(*args, **, &blk); end
  def color?(*args, **, &blk); end
  def colorize(*args, **, &blk); end
  def context(*args, **, &blk); end
  def context_requiring_sorbet!(*args, **, &blk); end
  def cyan(*args, **, &blk); end
  def exec_path(*args, **, &blk); end
  def gray(*args, **, &blk); end
  def green(*args, **, &blk); end
  def highlight(*args, **, &blk); end
  def red(*args, **, &blk); end
  def say(*args, **, &blk); end
  def say_error(*args, **, &blk); end
  def yellow(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Spoom::Colorize
end
class Spoom::Cli::Bump < Thor
  def bump(*args, **, &blk); end
  def help(command = nil, subcommand = nil); end
  def print_changes(files, command:, from: nil, to: nil, dry: nil, path: nil); end
  def undo_changes(files, from_strictness); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
  include Spoom::Cli::Helper
end
class Spoom::FileTree
  def add_path(*args, **, &blk); end
  def add_paths(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def nodes(*args, **, &blk); end
  def nodes_strictness_scores(*args, **, &blk); end
  def nodes_strictnesses(*args, **, &blk); end
  def paths(*args, **, &blk); end
  def paths_strictness_scores(*args, **, &blk); end
  def print(*args, **, &blk); end
  def print_with_strictnesses(*args, **, &blk); end
  def roots(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::FileTree::Node < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def children; end
  def name; end
  def parent; end
  def path(*args, **, &blk); end
  def self.inherited(s); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class Spoom::FileTree::Visitor
  def self.new(*args, **, &blk); end
  def visit_node(*args, **, &blk); end
  def visit_nodes(*args, **, &blk); end
  def visit_tree(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::FileTree::CollectNodes < Spoom::FileTree::Visitor
  def initialize(*args, **, &blk); end
  def nodes(*args, **, &blk); end
  def visit_node(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::FileTree::CollectStrictnesses < Spoom::FileTree::Visitor
  def initialize(*args, **, &blk); end
  def strictnesses(*args, **, &blk); end
  def visit_node(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::FileTree::CollectScores < Spoom::FileTree::CollectStrictnesses
  def initialize(*args, **, &blk); end
  def node_score(*args, **, &blk); end
  def scores(*args, **, &blk); end
  def strictness_score(*args, **, &blk); end
  def visit_node(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::FileTree::Printer < Spoom::FileTree::Visitor
  def initialize(*args, **, &blk); end
  def strictness_color(*args, **, &blk); end
  def visit_node(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Cli::Config < Thor
  def help(command = nil, subcommand = nil); end
  def show; end
  include Spoom::Cli::Helper
end
class Spoom::Cli::LSP < Thor
  def defs(file, line, col); end
  def find(query); end
  def help(command = nil, subcommand = nil); end
  def hover(file, line, col); end
  def list; end
  def lsp_client; end
  def refs(file, line, col); end
  def run(&block); end
  def show; end
  def sigs(file, line, col); end
  def symbol_printer; end
  def symbols(file); end
  def to_uri(path); end
  def types(file, line, col); end
  include Spoom::Cli::Helper
end
module Spoom::Coverage
  def self.file_tree(*args, **, &blk); end
  def self.report(*args, **, &blk); end
  def self.snapshot(*args, **, &blk); end
end
class Spoom::Coverage::Snapshot < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def calls_typed; end
  def calls_typed=(val); end
  def calls_untyped; end
  def calls_untyped=(val); end
  def classes; end
  def classes=(val); end
  def commit_sha; end
  def commit_sha=(val); end
  def commit_timestamp; end
  def commit_timestamp=(val); end
  def duration; end
  def duration=(val); end
  def files; end
  def files=(val); end
  def methods_with_sig; end
  def methods_with_sig=(val); end
  def methods_with_sig_excluding_rbis; end
  def methods_with_sig_excluding_rbis=(val); end
  def methods_without_sig; end
  def methods_without_sig=(val); end
  def methods_without_sig_excluding_rbis; end
  def methods_without_sig_excluding_rbis=(val); end
  def modules; end
  def modules=(val); end
  def print(*args, **, &blk); end
  def rbi_files; end
  def rbi_files=(val); end
  def self.from_json(*args, **, &blk); end
  def self.from_obj(*args, **, &blk); end
  def self.inherited(s); end
  def sigils; end
  def sigils=(val); end
  def sigils_excluding_rbis; end
  def sigils_excluding_rbis=(val); end
  def singleton_classes; end
  def singleton_classes=(val); end
  def timestamp; end
  def timestamp=(val); end
  def to_json(*args, **, &blk); end
  def version_runtime; end
  def version_runtime=(val); end
  def version_static; end
  def version_static=(val); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
  extend T::Sig
end
class Spoom::Coverage::SnapshotPrinter < Spoom::Printer
  def percent(*args, **, &blk); end
  def print_map(*args, **, &blk); end
  def print_snapshot(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Coverage::D3
  def self.header_script(*args, **, &blk); end
  def self.header_style(*args, **, &blk); end
end
class Spoom::Coverage::D3::Base
  def html(*args, **, &blk); end
  def id(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def script(*args, **, &blk); end
  def self.header_script(*args, **, &blk); end
  def self.header_style(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::CircleMap < Spoom::Coverage::D3::Base
  def script(*args, **, &blk); end
  def self.header_script(*args, **, &blk); end
  def self.header_style(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
end
class Spoom::Coverage::D3::CircleMap::Sigils < Spoom::Coverage::D3::CircleMap
  def initialize(*args, **, &blk); end
  def tree_node_to_json(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Pie < Spoom::Coverage::D3::Base
  def initialize(*args, **, &blk); end
  def script(*args, **, &blk); end
  def self.header_script(*args, **, &blk); end
  def self.header_style(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Pie::Sigils < Spoom::Coverage::D3::Pie
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Pie::Calls < Spoom::Coverage::D3::Pie
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Pie::Sigs < Spoom::Coverage::D3::Pie
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline < Spoom::Coverage::D3::Base
  def area(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def line(*args, **, &blk); end
  def plot(*args, **, &blk); end
  def points(*args, **, &blk); end
  def script(*args, **, &blk); end
  def self.header_script(*args, **, &blk); end
  def self.header_style(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def x_scale(*args, **, &blk); end
  def x_ticks(*args, **, &blk); end
  def y_scale(*args, **, &blk); end
  def y_ticks(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Versions < Spoom::Coverage::D3::Timeline
  def initialize(*args, **, &blk); end
  def plot(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Runtimes < Spoom::Coverage::D3::Timeline
  def initialize(*args, **, &blk); end
  def plot(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Stacked < Spoom::Coverage::D3::Timeline
  def line(*args, **, &blk); end
  def plot(*args, **, &blk); end
  def script(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Sigils < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Calls < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::Sigs < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::Timeline::RBIs < Spoom::Coverage::D3::Timeline::Stacked
  def initialize(*args, **, &blk); end
  def line(*args, **, &blk); end
  def plot(*args, **, &blk); end
  def script(*args, **, &blk); end
  def tooltip(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::D3::ColorPalette < T::Struct
  def __t_props_generated_deserialize(*args, **); end
  def __t_props_generated_serialize(*args, **); end
  def false; end
  def false=(val); end
  def ignore; end
  def ignore=(val); end
  def self.inherited(s); end
  def strict; end
  def strict=(val); end
  def strong; end
  def strong=(val); end
  def true; end
  def true=(val); end
  extend T::Props::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Plugin::ClassMethods
  extend T::Props::Serializable::ClassMethods
end
class Spoom::Coverage::Template
  def erb(*args, **, &blk); end
  def get_binding(*args, **, &blk); end
  def html(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Page < Spoom::Coverage::Template
  def body_html(*args, **, &blk); end
  def cards(*args, **, &blk); end
  def footer_html(*args, **, &blk); end
  def header_html(*args, **, &blk); end
  def header_script(*args, **, &blk); end
  def header_style(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def palette(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  def title(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
module Spoom::Coverage::Cards
end
class Spoom::Coverage::Cards::Card < Spoom::Coverage::Template
  def body; end
  def initialize(*args, **, &blk); end
  def title(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Erb < Spoom::Coverage::Cards::Card
  def erb(*args, **, &blk); end
  def html(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def self.new(*args, **, &blk); end
  extend T::Helpers
  extend T::Private::Abstract::Hooks
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Snapshot < Spoom::Coverage::Cards::Card
  def initialize(*args, **, &blk); end
  def pie_calls(*args, **, &blk); end
  def pie_sigils(*args, **, &blk); end
  def pie_sigs(*args, **, &blk); end
  def snapshot(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Map < Spoom::Coverage::Cards::Card
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline < Spoom::Coverage::Cards::Card
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::Sigils < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::Calls < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::Sigs < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::RBIs < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::Versions < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::Timeline::Runtimes < Spoom::Coverage::Cards::Timeline
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Cards::SorbetIntro < Spoom::Coverage::Cards::Erb
  def erb(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Coverage::Report < Spoom::Coverage::Page
  def cards(*args, **, &blk); end
  def header_html(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Timeline
  def commits_for_dates(*args, **, &blk); end
  def initialize(*args, **, &blk); end
  def months(*args, **, &blk); end
  def ticks(*args, **, &blk); end
  extend T::Private::Methods::MethodHooks
  extend T::Private::Methods::SingletonMethodHooks
  extend T::Sig
end
class Spoom::Cli::Coverage < Thor
  def bundle_install(path, sha); end
  def help(command = nil, subcommand = nil); end
  def message_no_data(file); end
  def open(file = nil); end
  def parse_time(string, option); end
  def report; end
  def snapshot; end
  def timeline; end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Run < Thor
  def colorize_message(message); end
  def format_error(error, format); end
  def help(command = nil, subcommand = nil); end
  def tc(*paths_to_select); end
  include Spoom::Cli::Helper
end
class Spoom::Cli::Main < Thor
  def __print_version; end
  def bump(*args); end
  def config(*args); end
  def coverage(*args); end
  def files; end
  def lsp(*args); end
  def self.exit_on_failure?; end
  def tc(*args); end
  extend T::Sig
  include Spoom::Cli::Helper
end
class Spoom::Error < StandardError
end
