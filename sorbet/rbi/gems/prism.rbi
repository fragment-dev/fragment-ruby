# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: false
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/prism/all/prism.rbi
#
# prism-0.21.0

module Prism
  def self.dump(*arg0); end
  def self.dump_file(*arg0); end
  def self.lex(*arg0); end
  def self.lex_compat(source, **options); end
  def self.lex_file(*arg0); end
  def self.lex_ripper(source); end
  def self.load(source, serialized); end
  def self.parse(*arg0); end
  def self.parse_comments(*arg0); end
  def self.parse_failure?(source, **options); end
  def self.parse_file(*arg0); end
  def self.parse_file_comments(*arg0); end
  def self.parse_file_failure?(filepath, **options); end
  def self.parse_file_success?(*arg0); end
  def self.parse_lex(*arg0); end
  def self.parse_lex_file(*arg0); end
  def self.parse_success?(*arg0); end
end
class Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def deconstruct; end
  def location; end
  def newline?; end
  def pretty_print(q); end
  def set_newline_flag(newline_marked); end
  def slice; end
  def to_dot; end
  def type; end
end
class Prism::AliasGlobalVariableNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(new_name, old_name, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def new_name; end
  def old_name; end
  def self.type; end
  def type; end
end
class Prism::AliasMethodNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(new_name, old_name, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def new_name; end
  def old_name; end
  def self.type; end
  def type; end
end
class Prism::AlternationPatternNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(left, right, operator_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::AndNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(left, right, operator_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::ArgumentsNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def contains_keyword_splat?; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, arguments, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::ArrayNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def contains_splat?; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def flags; end
  def initialize(flags, elements, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
end
class Prism::ArrayPatternNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(constant, requireds, rest, posts, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def posts; end
  def requireds; end
  def rest; end
  def self.type; end
  def type; end
end
class Prism::AssocNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(key, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def key; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::AssocSplatNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(value, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::BackReferenceReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::BeginNode < Prism::Node
  def accept(visitor); end
  def begin_keyword; end
  def begin_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_clause; end
  def end_keyword; end
  def end_keyword_loc; end
  def ensure_clause; end
  def initialize(begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def rescue_clause; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def statements; end
  def type; end
end
class Prism::BlockArgumentNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(expression, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
end
class Prism::BlockLocalVariableNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, location); end
  def inspect(inspector = nil); end
  def name; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::BlockNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(locals, parameters, body, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def locals; end
  def opening; end
  def opening_loc; end
  def parameters; end
  def self.type; end
  def type; end
end
class Prism::BlockParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::BlockParametersNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(parameters, locals, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def locals; end
  def opening; end
  def opening_loc; end
  def parameters; end
  def self.type; end
  def type; end
end
class Prism::BreakNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(arguments, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def self.type; end
  def type; end
end
class Prism::CallAndWriteNode < Prism::Node
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end
  def inspect(inspector = nil); end
  def message; end
  def message_loc; end
  def name; end
  def opening; end
  def opening_loc; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::CallOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallOrWriteNode < Prism::Node
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def message; end
  def message_loc; end
  def operator; end
  def operator_loc; end
  def read_name; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
  def write_name; end
end
class Prism::CallTargetNode < Prism::Node
  def accept(visitor); end
  def attribute_write?; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, name, message_loc, location); end
  def inspect(inspector = nil); end
  def message; end
  def message_loc; end
  def name; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::CapturePatternNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(value, target, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::CaseMatchNode < Prism::Node
  def accept(visitor); end
  def case_keyword; end
  def case_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def consequent; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def predicate; end
  def self.type; end
  def type; end
end
class Prism::CaseNode < Prism::Node
  def accept(visitor); end
  def case_keyword; end
  def case_keyword_loc; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def consequent; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def predicate; end
  def self.type; end
  def type; end
end
class Prism::ClassNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def class_keyword; end
  def class_keyword_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant_path; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def inheritance_operator; end
  def inheritance_operator_loc; end
  def initialize(locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end
  def inspect(inspector = nil); end
  def locals; end
  def name; end
  def self.type; end
  def superclass; end
  def type; end
end
class Prism::ClassVariableAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, operator, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ClassVariableReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ClassVariableTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ClassVariableWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, operator, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ConstantPathAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(target, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathNode < Prism::Node
  def accept(visitor); end
  def child; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def delimiter; end
  def delimiter_loc; end
  def full_name; end
  def full_name_parts; end
  def initialize(parent, child, delimiter_loc, location); end
  def inspect(inspector = nil); end
  def parent; end
  def self.type; end
  def type; end
end
class Prism::ConstantPathOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(target, operator_loc, value, operator, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(target, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantPathTargetNode < Prism::Node
  def accept(visitor); end
  def child; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def delimiter; end
  def delimiter_loc; end
  def full_name; end
  def full_name_parts; end
  def initialize(parent, child, delimiter_loc, location); end
  def inspect(inspector = nil); end
  def parent; end
  def self.type; end
  def type; end
end
class Prism::ConstantPathWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(target, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def target; end
  def type; end
  def value; end
end
class Prism::ConstantReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def full_name; end
  def full_name_parts; end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ConstantTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::ConstantWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::DefNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def def_keyword; end
  def def_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def equal; end
  def equal_loc; end
  def initialize(name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def locals; end
  def lparen; end
  def lparen_loc; end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def parameters; end
  def receiver; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
end
class Prism::DefinedNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(lparen_loc, value, rparen_loc, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ElseNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def else_keyword; end
  def else_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(else_keyword_loc, statements, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::EmbeddedStatementsNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(opening_loc, statements, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::EmbeddedVariableNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(operator_loc, variable, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def variable; end
end
class Prism::EnsureNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def ensure_keyword; end
  def ensure_keyword_loc; end
  def initialize(ensure_keyword_loc, statements, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::FalseNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::FindPatternNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(constant, left, requireds, right, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def opening; end
  def opening_loc; end
  def requireds; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::FlipFlopNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exclude_end?; end
  def flags; end
  def initialize(flags, left, right, operator_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::FloatNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ForNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def collection; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def do_keyword; end
  def do_keyword_loc; end
  def end_keyword; end
  def end_keyword_loc; end
  def for_keyword; end
  def for_keyword_loc; end
  def in_keyword; end
  def in_keyword_loc; end
  def index; end
  def initialize(index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::ForwardingArgumentsNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::ForwardingParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::ForwardingSuperNode < Prism::Node
  def accept(visitor); end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(block, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, operator, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::GlobalVariableReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::GlobalVariableWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::HashNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(opening_loc, elements, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
end
class Prism::HashPatternNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def initialize(constant, elements, rest, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def rest; end
  def self.type; end
  def type; end
end
class Prism::IfNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def if_keyword; end
  def if_keyword_loc; end
  def initialize(if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def predicate; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def statements; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::ImaginaryNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(numeric, location); end
  def inspect(inspector = nil); end
  def numeric; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ImplicitNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(value, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
  def value; end
end
class Prism::ImplicitRestNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::InNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def in; end
  def in_loc; end
  def initialize(pattern, statements, in_loc, then_loc, location); end
  def inspect(inspector = nil); end
  def pattern; end
  def self.type; end
  def statements; end
  def then; end
  def then_loc; end
  def type; end
end
class Prism::IndexAndWriteNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexOrWriteNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def call_operator; end
  def call_operator_loc; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def value; end
  def variable_call?; end
end
class Prism::IndexTargetNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def attribute_write?; end
  def block; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def ignore_visibility?; end
  def initialize(flags, receiver, opening_loc, arguments, closing_loc, block, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def receiver; end
  def safe_navigation?; end
  def self.type; end
  def type; end
  def variable_call?; end
end
class Prism::InstanceVariableAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, operator, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InstanceVariableReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::InstanceVariableTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::InstanceVariableWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(name, name_loc, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::IntegerNode < Prism::Node
  def accept(visitor); end
  def binary?; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def decimal?; end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def hexadecimal?; end
  def initialize(flags, location); end
  def inspect(inspector = nil); end
  def octal?; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::InterpolatedMatchLastLineNode < Prism::Node
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def flags; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(flags, opening_loc, parts, closing_loc, location); end
  def inspect(inspector = nil); end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def parts; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::InterpolatedRegularExpressionNode < Prism::Node
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def flags; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(flags, opening_loc, parts, closing_loc, location); end
  def inspect(inspector = nil); end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def parts; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::InterpolatedStringNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(opening_loc, parts, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def parts; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
  include Prism::HeredocQuery
end
class Prism::InterpolatedSymbolNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(opening_loc, parts, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def parts; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
end
class Prism::InterpolatedXStringNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(opening_loc, parts, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def parts; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
  include Prism::HeredocQuery
end
class Prism::KeywordHashNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def elements; end
  def flags; end
  def initialize(flags, elements, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def symbol_keys?; end
  def type; end
end
class Prism::KeywordRestParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::LambdaNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end
  def inspect(inspector = nil); end
  def locals; end
  def opening; end
  def opening_loc; end
  def operator; end
  def operator_loc; end
  def parameters; end
  def self.type; end
  def type; end
end
class Prism::LocalVariableAndWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name_loc, operator_loc, value, name, depth, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableOperatorWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name_loc, operator_loc, value, name, operator, depth, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableOrWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name_loc, operator_loc, value, name, depth, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::LocalVariableReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name, depth, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::LocalVariableTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name, depth, location); end
  def inspect(inspector = nil); end
  def name; end
  def self.type; end
  def type; end
end
class Prism::LocalVariableWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def depth; end
  def initialize(name, depth, name_loc, value, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchLastLineNode < Prism::Node
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def flags; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end
  def inspect(inspector = nil); end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
  def unescaped; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::MatchPredicateNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(value, pattern, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def pattern; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchRequiredNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(value, pattern, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def pattern; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::MatchWriteNode < Prism::Node
  def accept(visitor); end
  def call; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(call, targets, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def targets; end
  def type; end
end
class Prism::MissingNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::ModuleNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def constant_path; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end
  def inspect(inspector = nil); end
  def locals; end
  def module_keyword; end
  def module_keyword_loc; end
  def name; end
  def self.type; end
  def type; end
end
class Prism::MultiTargetNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, location); end
  def inspect(inspector = nil); end
  def lefts; end
  def lparen; end
  def lparen_loc; end
  def rest; end
  def rights; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
end
class Prism::MultiWriteNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def lefts; end
  def lparen; end
  def lparen_loc; end
  def operator; end
  def operator_loc; end
  def rest; end
  def rights; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::NextNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(arguments, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def self.type; end
  def type; end
end
class Prism::NilNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::NoKeywordsParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(operator_loc, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
end
class Prism::NumberedParametersNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(maximum, location); end
  def inspect(inspector = nil); end
  def maximum; end
  def self.type; end
  def type; end
end
class Prism::NumberedReferenceReadNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(number, location); end
  def inspect(inspector = nil); end
  def number; end
  def self.type; end
  def type; end
end
class Prism::OptionalKeywordParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::OptionalParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, operator_loc, value, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::OrNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(left, right, operator_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::ParametersNode < Prism::Node
  def accept(visitor); end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end
  def inspect(inspector = nil); end
  def keyword_rest; end
  def keywords; end
  def optionals; end
  def posts; end
  def requireds; end
  def rest; end
  def self.type; end
  def signature; end
  def type; end
end
class Prism::ParenthesesNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(body, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
end
class Prism::PinnedExpressionNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(expression, operator_loc, lparen_loc, rparen_loc, location); end
  def inspect(inspector = nil); end
  def lparen; end
  def lparen_loc; end
  def operator; end
  def operator_loc; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
end
class Prism::PinnedVariableNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(variable, operator_loc, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
  def variable; end
end
class Prism::PostExecutionNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def opening; end
  def opening_loc; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::PreExecutionNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(statements, keyword_loc, opening_loc, closing_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def opening; end
  def opening_loc; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::ProgramNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(locals, statements, location); end
  def inspect(inspector = nil); end
  def locals; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::RangeNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exclude_end?; end
  def flags; end
  def initialize(flags, left, right, operator_loc, location); end
  def inspect(inspector = nil); end
  def left; end
  def operator; end
  def operator_loc; end
  def right; end
  def self.type; end
  def type; end
end
class Prism::RationalNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(numeric, location); end
  def inspect(inspector = nil); end
  def numeric; end
  def self.type; end
  def type; end
  def value; end
end
class Prism::RedoNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::RegularExpressionNode < Prism::Node
  def accept(visitor); end
  def ascii_8bit?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def euc_jp?; end
  def extended?; end
  def flags; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def ignore_case?; end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end
  def inspect(inspector = nil); end
  def multi_line?; end
  def once?; end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
  def unescaped; end
  def utf_8?; end
  def windows_31j?; end
  include Prism::RegularExpressionOptions
end
class Prism::RequiredKeywordParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::RequiredParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, location); end
  def inspect(inspector = nil); end
  def name; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::RescueModifierNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(expression, keyword_loc, rescue_expression, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def rescue_expression; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def type; end
end
class Prism::RescueNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def exceptions; end
  def initialize(keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def operator; end
  def operator_loc; end
  def reference; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::RestParameterNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, name, name_loc, operator_loc, location); end
  def inspect(inspector = nil); end
  def name; end
  def name_loc; end
  def operator; end
  def operator_loc; end
  def repeated_parameter?; end
  def self.type; end
  def type; end
end
class Prism::RetryNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::ReturnNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(keyword_loc, arguments, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def self.type; end
  def type; end
end
class Prism::SelfNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::SingletonClassNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def class_keyword; end
  def class_keyword_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def expression; end
  def initialize(locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def locals; end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
end
class Prism::SourceEncodingNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::SourceFileNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def filepath; end
  def initialize(filepath, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::SourceLineNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::SplatNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def expression; end
  def initialize(operator_loc, expression, location); end
  def inspect(inspector = nil); end
  def operator; end
  def operator_loc; end
  def self.type; end
  def type; end
end
class Prism::StatementsNode < Prism::Node
  def accept(visitor); end
  def body; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(body, location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::StringNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def forced_binary_encoding?; end
  def forced_utf8_encoding?; end
  def frozen?; end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
  def unescaped; end
  include Prism::HeredocQuery
end
class Prism::SuperNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def block; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
end
class Prism::SymbolNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def forced_binary_encoding?; end
  def forced_us_ascii_encoding?; end
  def forced_utf8_encoding?; end
  def initialize(flags, opening_loc, value_loc, closing_loc, unescaped, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
  def unescaped; end
  def value; end
  def value_loc; end
end
class Prism::TrueNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(location); end
  def inspect(inspector = nil); end
  def self.type; end
  def type; end
end
class Prism::UndefNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(names, keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def names; end
  def self.type; end
  def type; end
end
class Prism::UnlessNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def consequent; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def end_keyword; end
  def end_keyword_loc; end
  def initialize(keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def statements; end
  def then_keyword; end
  def then_keyword_loc; end
  def type; end
end
class Prism::UntilNode < Prism::Node
  def accept(visitor); end
  def begin_modifier?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def statements; end
  def type; end
end
class Prism::WhenNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def conditions; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(keyword_loc, conditions, statements, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def self.type; end
  def statements; end
  def type; end
end
class Prism::WhileNode < Prism::Node
  def accept(visitor); end
  def begin_modifier?; end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def initialize(flags, keyword_loc, closing_loc, predicate, statements, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def predicate; end
  def self.type; end
  def set_newline_flag(newline_marked); end
  def statements; end
  def type; end
end
class Prism::XStringNode < Prism::Node
  def accept(visitor); end
  def child_nodes; end
  def closing; end
  def closing_loc; end
  def comment_targets; end
  def compact_child_nodes; end
  def content; end
  def content_loc; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def flags; end
  def forced_binary_encoding?; end
  def forced_utf8_encoding?; end
  def initialize(flags, opening_loc, content_loc, closing_loc, unescaped, location); end
  def inspect(inspector = nil); end
  def opening; end
  def opening_loc; end
  def self.type; end
  def type; end
  def unescaped; end
  include Prism::HeredocQuery
end
class Prism::YieldNode < Prism::Node
  def accept(visitor); end
  def arguments; end
  def child_nodes; end
  def comment_targets; end
  def compact_child_nodes; end
  def copy(**params); end
  def deconstruct; end
  def deconstruct_keys(keys); end
  def initialize(keyword_loc, lparen_loc, arguments, rparen_loc, location); end
  def inspect(inspector = nil); end
  def keyword; end
  def keyword_loc; end
  def lparen; end
  def lparen_loc; end
  def rparen; end
  def rparen_loc; end
  def self.type; end
  def type; end
end
module Prism::ArgumentsNodeFlags
end
module Prism::ArrayNodeFlags
end
module Prism::CallNodeFlags
end
module Prism::EncodingFlags
end
module Prism::IntegerBaseFlags
end
module Prism::KeywordHashNodeFlags
end
module Prism::LoopFlags
end
module Prism::ParameterFlags
end
module Prism::RangeFlags
end
module Prism::RegularExpressionFlags
end
module Prism::StringFlags
end
module Prism::SymbolFlags
end
module Prism::RegularExpressionOptions
  def options; end
end
module Prism::HeredocQuery
  def heredoc?; end
end
class Prism::ConstantPathNode::DynamicPartsInConstantPathError < StandardError
end
class Prism::Source
  def character_column(byte_offset); end
  def character_offset(byte_offset); end
  def column(byte_offset); end
  def compute_offsets(code); end
  def find_line(byte_offset); end
  def initialize(source, start_line = nil, offsets = nil); end
  def line(byte_offset); end
  def line_start(byte_offset); end
  def offsets; end
  def slice(byte_offset, length); end
  def source; end
  def start_line; end
  def start_line=(arg0); end
end
class Prism::Location
  def ==(other); end
  def comments; end
  def copy(**options); end
  def deconstruct_keys(keys); end
  def end_character_column; end
  def end_character_offset; end
  def end_column; end
  def end_line; end
  def end_offset; end
  def initialize(source, start_offset, length); end
  def inspect; end
  def join(other); end
  def length; end
  def pretty_print(q); end
  def self.null; end
  def slice; end
  def source; end
  def start_character_column; end
  def start_character_offset; end
  def start_column; end
  def start_line; end
  def start_line_slice; end
  def start_offset; end
end
class Prism::Comment
  def deconstruct_keys(keys); end
  def initialize(location); end
  def location; end
end
class Prism::InlineComment < Prism::Comment
  def inspect; end
  def trailing?; end
end
class Prism::EmbDocComment < Prism::Comment
  def inspect; end
  def trailing?; end
end
class Prism::MagicComment
  def deconstruct_keys(keys); end
  def initialize(key_loc, value_loc); end
  def inspect; end
  def key; end
  def key_loc; end
  def value; end
  def value_loc; end
end
class Prism::ParseError
  def deconstruct_keys(keys); end
  def initialize(message, location, level); end
  def inspect; end
  def level; end
  def location; end
  def message; end
end
class Prism::ParseWarning
  def deconstruct_keys(keys); end
  def initialize(message, location, level); end
  def inspect; end
  def level; end
  def location; end
  def message; end
end
class Prism::ParseResult
  def attach_comments!; end
  def comments; end
  def data_loc; end
  def deconstruct_keys(keys); end
  def errors; end
  def failure?; end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end
  def magic_comments; end
  def mark_newlines!; end
  def source; end
  def success?; end
  def value; end
  def warnings; end
end
class Prism::Token
  def ==(other); end
  def deconstruct_keys(keys); end
  def initialize(type, value, location); end
  def location; end
  def pretty_print(q); end
  def type; end
  def value; end
end
class Prism::ParseResult::Comments
  def attach!; end
  def initialize(parse_result); end
  def nearest_targets(node, comment); end
  def parse_result; end
end
class Prism::ParseResult::Comments::NodeTarget
  def <<(comment); end
  def encloses?(comment); end
  def end_offset; end
  def initialize(node); end
  def node; end
  def start_offset; end
end
class Prism::ParseResult::Comments::LocationTarget
  def <<(comment); end
  def encloses?(comment); end
  def end_offset; end
  def initialize(location); end
  def location; end
  def start_offset; end
end
class Prism::BasicVisitor
  def visit(node); end
  def visit_all(nodes); end
  def visit_child_nodes(node); end
end
class Prism::Visitor < Prism::BasicVisitor
  def visit_alias_global_variable_node(node); end
  def visit_alias_method_node(node); end
  def visit_alternation_pattern_node(node); end
  def visit_and_node(node); end
  def visit_arguments_node(node); end
  def visit_array_node(node); end
  def visit_array_pattern_node(node); end
  def visit_assoc_node(node); end
  def visit_assoc_splat_node(node); end
  def visit_back_reference_read_node(node); end
  def visit_begin_node(node); end
  def visit_block_argument_node(node); end
  def visit_block_local_variable_node(node); end
  def visit_block_node(node); end
  def visit_block_parameter_node(node); end
  def visit_block_parameters_node(node); end
  def visit_break_node(node); end
  def visit_call_and_write_node(node); end
  def visit_call_node(node); end
  def visit_call_operator_write_node(node); end
  def visit_call_or_write_node(node); end
  def visit_call_target_node(node); end
  def visit_capture_pattern_node(node); end
  def visit_case_match_node(node); end
  def visit_case_node(node); end
  def visit_class_node(node); end
  def visit_class_variable_and_write_node(node); end
  def visit_class_variable_operator_write_node(node); end
  def visit_class_variable_or_write_node(node); end
  def visit_class_variable_read_node(node); end
  def visit_class_variable_target_node(node); end
  def visit_class_variable_write_node(node); end
  def visit_constant_and_write_node(node); end
  def visit_constant_operator_write_node(node); end
  def visit_constant_or_write_node(node); end
  def visit_constant_path_and_write_node(node); end
  def visit_constant_path_node(node); end
  def visit_constant_path_operator_write_node(node); end
  def visit_constant_path_or_write_node(node); end
  def visit_constant_path_target_node(node); end
  def visit_constant_path_write_node(node); end
  def visit_constant_read_node(node); end
  def visit_constant_target_node(node); end
  def visit_constant_write_node(node); end
  def visit_def_node(node); end
  def visit_defined_node(node); end
  def visit_else_node(node); end
  def visit_embedded_statements_node(node); end
  def visit_embedded_variable_node(node); end
  def visit_ensure_node(node); end
  def visit_false_node(node); end
  def visit_find_pattern_node(node); end
  def visit_flip_flop_node(node); end
  def visit_float_node(node); end
  def visit_for_node(node); end
  def visit_forwarding_arguments_node(node); end
  def visit_forwarding_parameter_node(node); end
  def visit_forwarding_super_node(node); end
  def visit_global_variable_and_write_node(node); end
  def visit_global_variable_operator_write_node(node); end
  def visit_global_variable_or_write_node(node); end
  def visit_global_variable_read_node(node); end
  def visit_global_variable_target_node(node); end
  def visit_global_variable_write_node(node); end
  def visit_hash_node(node); end
  def visit_hash_pattern_node(node); end
  def visit_if_node(node); end
  def visit_imaginary_node(node); end
  def visit_implicit_node(node); end
  def visit_implicit_rest_node(node); end
  def visit_in_node(node); end
  def visit_index_and_write_node(node); end
  def visit_index_operator_write_node(node); end
  def visit_index_or_write_node(node); end
  def visit_index_target_node(node); end
  def visit_instance_variable_and_write_node(node); end
  def visit_instance_variable_operator_write_node(node); end
  def visit_instance_variable_or_write_node(node); end
  def visit_instance_variable_read_node(node); end
  def visit_instance_variable_target_node(node); end
  def visit_instance_variable_write_node(node); end
  def visit_integer_node(node); end
  def visit_interpolated_match_last_line_node(node); end
  def visit_interpolated_regular_expression_node(node); end
  def visit_interpolated_string_node(node); end
  def visit_interpolated_symbol_node(node); end
  def visit_interpolated_x_string_node(node); end
  def visit_keyword_hash_node(node); end
  def visit_keyword_rest_parameter_node(node); end
  def visit_lambda_node(node); end
  def visit_local_variable_and_write_node(node); end
  def visit_local_variable_operator_write_node(node); end
  def visit_local_variable_or_write_node(node); end
  def visit_local_variable_read_node(node); end
  def visit_local_variable_target_node(node); end
  def visit_local_variable_write_node(node); end
  def visit_match_last_line_node(node); end
  def visit_match_predicate_node(node); end
  def visit_match_required_node(node); end
  def visit_match_write_node(node); end
  def visit_missing_node(node); end
  def visit_module_node(node); end
  def visit_multi_target_node(node); end
  def visit_multi_write_node(node); end
  def visit_next_node(node); end
  def visit_nil_node(node); end
  def visit_no_keywords_parameter_node(node); end
  def visit_numbered_parameters_node(node); end
  def visit_numbered_reference_read_node(node); end
  def visit_optional_keyword_parameter_node(node); end
  def visit_optional_parameter_node(node); end
  def visit_or_node(node); end
  def visit_parameters_node(node); end
  def visit_parentheses_node(node); end
  def visit_pinned_expression_node(node); end
  def visit_pinned_variable_node(node); end
  def visit_post_execution_node(node); end
  def visit_pre_execution_node(node); end
  def visit_program_node(node); end
  def visit_range_node(node); end
  def visit_rational_node(node); end
  def visit_redo_node(node); end
  def visit_regular_expression_node(node); end
  def visit_required_keyword_parameter_node(node); end
  def visit_required_parameter_node(node); end
  def visit_rescue_modifier_node(node); end
  def visit_rescue_node(node); end
  def visit_rest_parameter_node(node); end
  def visit_retry_node(node); end
  def visit_return_node(node); end
  def visit_self_node(node); end
  def visit_singleton_class_node(node); end
  def visit_source_encoding_node(node); end
  def visit_source_file_node(node); end
  def visit_source_line_node(node); end
  def visit_splat_node(node); end
  def visit_statements_node(node); end
  def visit_string_node(node); end
  def visit_super_node(node); end
  def visit_symbol_node(node); end
  def visit_true_node(node); end
  def visit_undef_node(node); end
  def visit_unless_node(node); end
  def visit_until_node(node); end
  def visit_when_node(node); end
  def visit_while_node(node); end
  def visit_x_string_node(node); end
  def visit_yield_node(node); end
end
class Prism::ParseResult::Newlines < Prism::Visitor
  def initialize(newline_marked); end
  def visit_block_node(node); end
  def visit_if_node(node); end
  def visit_lambda_node(node); end
  def visit_statements_node(node); end
  def visit_unless_node(node); end
end
module Prism::Debug
  def self.cruby_locals(source); end
  def self.format_errors(arg0, arg1); end
  def self.inspect_node(arg0); end
  def self.memsize(arg0); end
  def self.named_captures(arg0); end
  def self.newlines(source); end
  def self.prism_locals(source); end
  def self.profile_file(arg0); end
end
class Prism::Debug::ISeq
  def each_child; end
  def initialize(parts); end
  def instructions; end
  def local_table; end
  def parts; end
  def type; end
end
module Prism::Pack
  def self.parse(arg0, arg1, arg2); end
end
class Prism::Pack::Directive
  def describe; end
  def endian; end
  def initialize(version, variant, source, type, signed, endian, size, length_type, length); end
  def length; end
  def length_type; end
  def signed; end
  def size; end
  def source; end
  def type; end
  def variant; end
  def version; end
end
class Prism::Pack::Format
  def describe; end
  def directives; end
  def encoding; end
  def initialize(directives, encoding); end
end
